import numpy as np
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense

# Simulate time-series stakeholder data: (samples, timesteps, features)
num_stakeholders = 100
timesteps = 10  # e.g., 10 weeks
features = 4  # comm_freq, attendance, feedback_quality, responsiveness

X = np.random.rand(num_stakeholders, timesteps, features)
y = np.random.randint(0, 3, size=num_stakeholders)  # 0=Low, 1=Medium, 2=High

# LSTM Model
model = Sequential([
    LSTM(64, input_shape=(timesteps, features)),
    Dense(32, activation='relu'),
    Dense(3, activation='softmax')
])
model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.fit(X, y, epochs=20, batch_size=8)

ðŸ“Š 2. Streamlit Dashboard for Stakeholder Monitoring

You can create an interactive dashboard to upload stakeholder data and view engagement predictions:

# streamlit_app.py
import streamlit as st
import pandas as pd
import joblib

model = joblib.load("engagement_model.pkl")  # Pre-trained RandomForest

st.title("Stakeholder Engagement Level Detection")

uploaded_file = st.file_uploader("Upload CSV file", type=["csv"])
if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.write("Uploaded Data:", df)
    prediction = model.predict(df)
    mapping = {0: "Low", 1: "Medium", 2: "High"}
    df["Engagement Level"] = [mapping[p] for p in prediction]
    st.write("Prediction Results:", df)

To run:

streamlit run streamlit_app.py
